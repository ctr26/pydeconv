from simulate import simulate
    
# configfile: "config.yaml"
import numpy as np
import os

# Variables
COIN_FLIP_BIAS = 0.5
OBJ_NAME = ['spokes', 'points_random', 'test_target'] # possible objects are: 'spokes', 'points_random', 'test_target'
NITER = 500
NA = 0.8
MAX_PHOTONS = 1e2
SEED=np.linspace(100,200,10).astype(int)

# COIN_FLIP_BIAS = np.linspace(1e-9,1-1e-10,20)
# NA = np.linspace(0.1,1.4,20)
# MAX_PHOTONS = np.logspace(0,4,20)

base_dir = workflow.current_basedir
kwargs = {
    "coin_flip_bias":COIN_FLIP_BIAS,
    "niter":NITER,
    "na":NA,
    "max_photons":MAX_PHOTONS,
    "obj_name":OBJ_NAME,
    "seed":SEED,
    "base_dir":workflow.basedir, 
}
 # Variables

script = os.path.join(workflow.basedir,"simulate.py")
collate_script = os.path.join(workflow.basedir,"collate_csvs.py")

results = "{base_dir}/results/{coin_flip_bias}-{niter}-{na}-{max_photons}-{seed}-{obj_name}"

variables = [{"max_photons":np.logspace(0,4,100)},
            {"na":np.linspace(0.1,1.4,100)},
            {"coin_flip_bias":np.linspace(1e-9,1-1e-10,100)}]

results_full = []

for variable_dict in variables:
    wildcards = {**kwargs, **variable_dict}
    results_expanded = expand(results+"data.csv",**wildcards)
    results_full.extend(results_expanded)


breakpoint()
rule all:
    input:
        results_full


rule simulate:
    # input:
    output:
        expand(results+"/data.csv",**wildcards)
    run:
        df = simulation(
            numPixel=numPixel,
            midPos=midPos,
            pxSize=pxSize,
            lambda0=lambda0,
            seed=seed,
            obj_name=obj_name,
            max_photons=max_photons,
            na=na,
            coin_flip_bias=coin_flip_bias,
            niter=niter,
            metric_fn="kl",
        )
        # metadata_dict = {
        #     "seed": wildcards.seed,
        #     "na": wildcards.na,
        #     "max_photons": wildcards.max_photons,
        #     "obj_name": wildcards.obj_name,
        #     "niter": niter,
        #     "out_dir": out_dir,
        #     "coin_flip_bias": coin_flip_bias,
        # }
        df.join(**wildcards)
        df.reset_index().to_csv(output[0],index=False)

# rule collate_csvs:
#     input:
#         # results+"/generate_images.done"
#         results_full
#     conda:
#         "environment.yml"
#     # params:
#     #     outdir=directory(results)
#     resources:
#         mem_mb=1000
#     output:
#        "results/full.csv"
#     shell:
#         """
# 	    python {collate_script} \
#         --out_dir results \
#         """