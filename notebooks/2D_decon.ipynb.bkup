{
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5-final"
  },
  "orig_nbformat": 2,
  "kernelspec": {
   "name": "python3",
   "display_name": "Python 3",
   "language": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2,
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pydecon\n",
    "from PIL import Image\n",
    "import xarray as xr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "psf_data_path = \"\"\n",
    "psf_image = load_psf_data(psf_data_path)\n",
    "psf_positions = pydecon.localise_psfs(psf_image)\n",
    "cropped_psfs = pydecon.segment_psfs(psf_image,coords=psf_positions,window=[\"20\",\"20\"])\n",
    "cropped_psfs\n",
    "# psf = pydecon.psf_image_to_psf(psf_image)\n",
    "# Get PSF Image, find peaks, centre and crop, make sparse, load uv xy into xdata\n",
    "# psf = pydecon.psf(psf_image,dim=\"XY\",range={\"X\":(-10,20),:\"Y\":(-10,20)})\n",
    "\n",
    "image_path = \"\"\n",
    "im = Image.open(image_path)\n",
    "xarray_data = xarray.DataArray(im)"
   ]
  }
 ]
}